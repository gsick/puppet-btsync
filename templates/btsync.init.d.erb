#! /bin/sh
#Configurations injected by puppet....

PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME=btsync_<%= @listening_port %>
DAEMON=<%= @install_dir -%>/btsync
CONFIGFILE=<%= @install_dir -%>/$NAME.json
DAEMON_ARGS="--config <%= @install_dir -%>/$NAME.json --log <%= @log_directory -%>/$NAME.log"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

###############
# SysV Init Information
# chkconfig: - 58 74
# description: btsync_<%= @listening_port %> is the btsync daemon.
### BEGIN INIT INFO
# Provides : btsync_<%= @listening_port %>
# Required-Start: $network $local_fs $remote_fs $syslog
# Required-Stop: $network $local_fs $remote_fs $syslog
# Should-Start: $syslog network-manager
# Should-Stop: $syslog network-manager
# Default-Start : 2 3 4 5
# Default-Stop : 0 1 6
# Short-Description : Init script for btsync
# Description: BTSync daemon
### END INIT INFO

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#

do_start()
{
    # Return
    # 0 if daemon has been started
    # 1 if daemon was already running
    # 2 if daemon could not be started

    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
        || return 1
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
        $DAEMON_ARGS \
        || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
        # Return
        # 0 if daemon has been stopped
        # 1 if daemon was already stopped
        # 2 if daemon could not be stopped
        # other if a failure occurred
        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
        RETVAL="$?"
        [ "$RETVAL" = 2 ] && return 2

        # Wait for children to finish too if this is a daemon that forks
        # and if the daemon is only ever run from this initscript.
        # If the above conditions are not satisfied then add some other code
        # that waits for the process to drop all resources that could be
        # needed by services started subsequently. A last resort is to
        # sleep for some time.
        start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
        [ "$?" = 2 ] && return 2
        # Many daemons don't delete their pidfiles when they exit.
        rm -f $PIDFILE
        return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
        #
        # If the daemon can reload its configuration without
        # restarting (for example, when it is sent a SIGHUP),
        # then implement that here.
        #
        start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
        return 0
}

case "$1" in
  start)
        log_daemon_msg "Starting $NAME"
        do_start
        case "$?" in
                0|1) log_end_msg 0 ;;
                2) log_end_msg 1 ;;
        esac
        ;;
  stop)
        log_daemon_msg "Stopping $NAME"
        do_stop
        case "$?" in
                0|1) log_end_msg 0 ;;
                2) log_end_msg 1 ;;
        esac
        ;;
  #reload|force-reload)
        #
        # If do_reload() is not implemented then leave this commented out
        # and leave 'force-reload' as an alias for 'restart'.
        #
        #log_daemon_msg "Reloading $NAME"
        #do_reload
        #log_end_msg $?
        #;;
  status)
        # Parameters:
        # $1: configuration base name
        # Return:
        # return value 0 if running
        # return value 1 if no pid file
        # return value 2 if pid in pidfile not running
        if [ -f $PIDFILE ]; then
          TESTPID=$(cat $PIDFILE)
          if [ $(( $TESTPID )) -gt 10 ]; then
            if [ -f /proc/${TESTPID}/status ]; then
              log_daemon_msg "$NAME is running"
              exit 0
            else
              log_daemon_msg "$NAME .pid exists, but is not running"
              exit 2
            fi
          fi
        fi
        log_daemon_msg "$NAME is not running"
        exit 1
        ;;
  restart|force-reload)
        #
        # If the "reload" option is implemented then remove the
        # 'force-reload' alias
        #
        log_daemon_msg "Restarting $NAME"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  *)

        echo "Usage: $SCRIPTNAME {start|stop|restart|status|force-reload}" >&2
        exit 3
        ;;
esac
